name: Build Android ARM64 Library

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android-arm64:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c

    - name: Create CMakeLists.txt for NDK build
      run: |
        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.18.1)
        project(pinyinime)

        # Set C++ standard
        set(CMAKE_CXX_STANDARD 11)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        # Include directories
        include_directories(src)

        # Source files
        set(SOURCES
            src/dictbuilder.cpp
            src/dictlist.cpp
            src/dicttrie.cpp
            src/lpicache.cpp
            src/matrixsearch.cpp
            src/mystdlib.cpp
            src/ngram.cpp
            src/pinyinime.cpp
            src/searchutility.cpp
            src/spellingtable.cpp
            src/spellingtrie.cpp
            src/splparser.cpp
            src/sync.cpp
            src/userdict.cpp
            src/utf16char.cpp
            src/utf16reader.cpp
        )

        # Create shared library
        add_library(pinyinime SHARED ${SOURCES})

        # Set library properties
        set_target_properties(pinyinime PROPERTIES
            VERSION 1.0
            SOVERSION 1
        )

        # Compiler definitions
        target_compile_definitions(pinyinime PRIVATE PINYINIME_LIBRARY)
        EOF

    - name: Build for ARM64
      run: |
        mkdir -p build-arm64
        cd build-arm64
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)

    - name: Build for ARMv7
      run: |
        mkdir -p build-armv7
        cd build-armv7
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=armeabi-v7a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)

    - name: Build for x86_64
      run: |
        mkdir -p build-x86_64
        cd build-x86_64
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=x86_64 \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)

    - name: Verify build outputs
      run: |
        echo "=== ARM64 Build ==="
        ls -la build-arm64/
        file build-arm64/libpinyinime.so || true
        echo "=== ARMv7 Build ==="
        ls -la build-armv7/
        file build-armv7/libpinyinime.so || true
        echo "=== x86_64 Build ==="
        ls -la build-x86_64/
        file build-x86_64/libpinyinime.so || true

    - name: Create distribution package
      run: |
        mkdir -p dist/lib/{arm64-v8a,armeabi-v7a,x86_64}
        mkdir -p dist/include

        # Copy libraries
        cp build-arm64/libpinyinime.so dist/lib/arm64-v8a/
        cp build-armv7/libpinyinime.so dist/lib/armeabi-v7a/
        cp build-x86_64/libpinyinime.so dist/lib/x86_64/

        # Copy headers
        cp src/pinyinime.h dist/include/
        cp src/pinyinime_global.h dist/include/

    - name: Upload Android libraries
      uses: actions/upload-artifact@v4
      with:
        name: libpinyinime-android-all-archs
        path: dist/

    - name: Upload ARM64 library only
      uses: actions/upload-artifact@v4
      with:
        name: libpinyinime-android-arm64
        path: |
          build-arm64/libpinyinime.so
          src/pinyinime.h
          src/pinyinime_global.h
